// ---------------------------------------------------
// SETTINGS
// ---------------------------------------------------

// Number of columns you want in your grid.
$totalNumberColumns: 12;

// Padding you want on both sides of a column. This number * 2 = your gutter.
// Sink uses fixedâ€“width gutters, so no %.
$columnPadding: .6rem;

// Set the breakpoint at which columns will go to full width.
// If you're using Pear Pie, you can use one of the breakpoint variables like
// `$breakpoint-sm`.
$breakpoint-sink: $breakpoint-sm;


// ---------------------------------------------------
// CLASSES
// ---------------------------------------------------

// Use this class on a div wrapping a row of columns
// This is to offset the padding on the first and last column via negative margin
.grid-row {
    margin: 0 (-$columnPadding);
    font-size: 0; // Part of getting rid of the inline-block ghost space
        
    @media screen and (max-width: $breakpoint-sink) {
        margin: 0 auto;
    }
}

// Apply this class to all grid units
.grid-col {
    display: inline-block;
    padding: 0 $columnPadding;
    vertical-align: top;
    font-size: 1rem; // Part of getting rid of the inline-block ghost space
  	overflow: hidden;
//    Set border-box box-sizing (if you don't already universally)
//    -webkit-box-sizing: border-box;
//       -moz-box-sizing: border-box;
//            box-sizing: border-box;
    
    @media screen and (max-width: $breakpoint-sink) {
        display: block;
        padding-left: 0;
        padding-right: 0;
        width: auto;
    }
}

// Set up the placeholders
%whole         { width: percentage(1/1); }
%half          { width: percentage(1/2); }

%one-third     { width: percentage(1/3); }
%two-thirds    { width: percentage(2/3); }

%one-fourth    { width: percentage(1/4); }
%two-fourths   { width: percentage(2/4); }
%three-fourths { width: percentage(3/4); }

%one-fifth     { width: percentage(1/5); }
%two-fifths    { width: percentage(2/5); }
%three-fifths  { width: percentage(3/5); }
%four-fifths   { width: percentage(4/5); }

// Configure classes based on chosen number of columns
// This will pump out classes like `span-3` which will make the unit
// span 3 columns.
@for $n from 1 through $totalNumberColumns {
    .span-#{$n} {
        @if percentage($n/$totalNumberColumns) == percentage(1/1) {
            @extend %whole;
        } @else if percentage($n/$totalNumberColumns) == percentage(1/2) {
            @extend %half;
        } @else if percentage($n/$totalNumberColumns) == percentage(1/3) {
            @extend %one-third;
        } @else if percentage($n/$totalNumberColumns) == percentage(2/3) {
            @extend %two-thirds;
        } @else if percentage($n/$totalNumberColumns) == percentage(1/4) {
            @extend %one-fourth;
        } @else if percentage($n/$totalNumberColumns) == percentage(2/4) {
            @extend %two-fourths;
        } @else if percentage($n/$totalNumberColumns) == percentage(3/4) {
            @extend %three-fourths;
        } @else if percentage($n/$totalNumberColumns) == percentage(1/5) {
            @extend %one-fifth;
        } @else if percentage($n/$totalNumberColumns) == percentage(2/5) {
            @extend %two-fifths;
        } @else if percentage($n/$totalNumberColumns) == percentage(3/5) {
            @extend %three-fifths;
        } @else if percentage($n/$totalNumberColumns) == percentage(4/5) {
            @extend %four-fifths;
        } @else {
            width: percentage($n/$totalNumberColumns);
        }
    }
}

// Fractional classes
.span-whole         { @extend %whole; }
.span-half          { @extend %half; }

.span-one-third     { @extend %one-third; }
.span-two-thirds    { @extend %two-thirds; }

.span-one-fourth    { @extend %one-fourth; }
.span-two-fourths   { @extend %two-fourths; }
.span-three-fourths { @extend %three-fourths; }

.span-one-fifth     { @extend %one-fifth; }
.span-two-fifths    { @extend %two-fifths; }
.span-three-fifths  { @extend %three-fifths; }
.span-four-fifths   { @extend %four-fifths; }


// ---------------------------------------------------
// UTILITIES
// ---------------------------------------------------

// Vertically align a column to the middle
// Doesn't work, can't figure out why...
// .col-v-middle { vertical-align: middle; }

// Vertically align a column to the bottom
.col-v-bottom { vertical-align: bottom; }

// Centers the column in the grid and clears the row of all other columns
.col-centered {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

